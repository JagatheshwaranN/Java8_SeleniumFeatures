=======================================================================
Selenium
=======================================================================
1. Alert
==========
Alert is an interface. It is used to handle the alert / popup.
3 types - Simple, Confirm, and Prompt.

Usage
=====
Alert alert = driver.switchTo().alert();

Methods
=======
accept();
dismiss();
getText();
sendKeys();
wait.until(ExpectedConditions.alertIsPresent()); - Wait and switch to Alert.

Exception
=========
1. NoAlertPresentException
2. UnhandledAlertException
=======================================================================
2. Dropdown
===========
Select Class which implements ISelect Interface and WrapElement Interface.
It is used to handle the dropdown.
2 types - Single, and Multiple.

Usage
=====
Select selectObj = new Select(WebElement);

Methods
=======
selectByIndex();
selectByValue();
selectByVisibleText();
deselectByIndex();
deselectByValue();
deselectByVisibleText();
isMultiple();
deselectAll(); - Works ONLY with MultiSelect Dropdown.
getOptions();
getAllSelectedOptions();
getFirstSelectedOption();
getOptions().get(index) - To get specific option text

Exception
=========
1. UnexpectedTagNameException

NOTES:
1. deselectBy* Methods works ONLY with MultiSelect Dropdown.
2. Single Dropdown doesn't support deselectBy* methods.
3. selectByIndex() - Index may start from 0 or 1 based on implementation.
=======================================================================
3. Frame
========
RemoteWebDriver.RemoteTargetLocator class which implements WebDriver.TargetLocator Interface.
It has methods to handle the Frame.

Usage
=====
driver.switchTo().frame();

Methods
=======
frame(Index);
frame(IdOrName);
frame(WebElement);
ParentFrame(); - To switch from Child Frame to Parent Frame.
defaultContent(); - To switch From Frame to Normal Window.
wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(ByLocator)); - Wait and switch to Frame.

Exception
=========
1. NoSuchFrameException

NOTES:
1. Frame index starts with 0.
=======================================================================
4. Navigation
=============
RemoteWebDriver.RemoteNavigation class which implements WebDriver.Navigation Interface.
It is used to handle the navigation related actions.

Usage
=====
driver.navigate()

Methods
=======
to();
back();
forward();
refresh();
=======================================================================
5. Window
=========
RemoteWebDriver.RemoteTargetLocator class which implements WebDriver.TargetLocator Interface.
It has methods to handle the Window.

Usage
=====
driver.switchTo().window();
driver.switchTo().newWindow();

Methods
=======
window(handle);
newWindow(WindowType.WINDOW/TAB);

RemoteWindow class which implements WebDriver.Window Interface.
It is used to handle the Window view and size related operations.

Usage
=====
driver.manage().window()

methods
=======
maximize();
minimize();
fullscreen();
setPosition(Point(X Axis, Y Axis));
getPosition();
setSize(Dimension(Width, Height));
getSize();

Related Information
===================
Point and Dimension are classes, which is used to handle the window
position and window size.

Usage
=====
driver.manage().window().setPosition(Point)
driver.manage().window().setSize(Dimension)

Methods
=======
getX() => getPosition().getX();
getY() => getPosition().getY();
getWidth() => getSize().getWidth();
getHeight() => getSize().getHeight();

Exception
=========
1. NoSuchWindowException
=======================================================================
6. Cookies
==========
A cookie is a small piece of information that will be stored on the Client machine.
It contains data such as session data, user preferences and tracking information.

RemoteWebDriverOptions class implements WebDriver.Options interface and which
has methods to handle the cookie and its related operations.

Cookie is a class which the attribute details to create the cookie.

Usage
=====
driver.manage().addCookie(CookieObject);
Cookie cookie = new Cookie(Name, Value);

Methods
=======
addCookie(cookieObject);
getCookieNamed(cookieName);
getCookies();
deleteCookieNamed(cookieName);
deleteCookie(cookieObject);
deleteAllCookies();

Exception
=========
1. InvalidCookieDomainException
2. NoSuchCookieException
3. UnableToSetCookieException
=======================================================================
7. Element
==========
RemoteWebElement class which implements WebElement Interface along with some
other interfaces. It is used to handle the element related actions such as
click, clear and enter, etc.

Usage
=====
driver.findElement(ByLocator);
WebElement element = driver.findElement(ByLocator);

Methods
=======
clear();
click();
sendKeys();
isEnabled();
isDisplayed();
isSelected();
getText();
getAttribute(attributeName);
getCssValue(propertyName);
findElement(locator);
findElements(locator);
getShadowRoot();
getTagName();
getAriaRole();
getAccessibleName();
getDomProperty(propertyName);
getDomAttribute(propertyName);

Exception
=========
1. NoSuchElementException
=======================================================================
8. Mouse Actions
================
Actions class is used to handle the mouse related and keyboard related
operations.

Usage
=====
Actions actionObject = new Actions(driver);

Methods
=======
click();
clickAndHold();
release();
sendKeys(element, value);
contextClick();
doubleClick();
moveToElement();
scrollToElement();
dragAndDrop(element1, element2);
dragAndDropBy(source, x offset, y offset);
pause(Duration);
((RemoteWebDriver)driver).resetInputState();
keyDown(Key);
keyUp(Key);

x offset - droppable.getX() - draggable.getX();
y offset - droppable.getY() - draggable.getY();

PointerInput
============
PointerInput class is used to simulate various pointer interactions on a web page.

Usage
=====
PointerInput mouse = new PointerInput(Mouse, "Default Mouse");

Methods
=======
createPointerDown();
createPointerUp();

Sequence
========
Sequence class is used to simulate a chain of actions.

Usage
=====
Sequence sequence = new Sequence(InputSource, Length);

Methods
=======
addAction();

Exception
=========
1. MoveTargetOutOfBoundsException
2. InvalidCoordinatesException
=======================================================================
9. Waits
========
RemoteTimeouts class which implements Timeouts Interface is used to handle
the ImplicitWait, PageLoadTimeout and ScriptTimeout.

Usage
=====
driver.manage().timeouts();

Methods
=======
implicitlyWait(duration);
pageLoadTimeout(duration);
scriptTimeout(duration);

WebDriverWait
=============
WebDriverWait class is used to handle the Explicit[WebDriverWait].

Usage
=====
WebDriverWait wait = new WebDriverWait(driver, duration);

Methods
=======
until(expectedConditions);

FluentWait
==========
FluentWait class is used to handle the Explicit[FluentWait].

Usage
=====
Wait<WebDriverWait> wait = new FluentWait<>(driver, duration)
.withTimeout(duration)
.pollingEvery(duration)
.ignoring(exception) /.ignoringAll(exception);

Methods
=======
until(expectedConditions);

ExpectedConditions
==================
ExpectedConditions class used with ExplicitWait to check for the
conditions.
=======================================================================
10. Screenshot
==============
RemoteWebDriver class implements TakeScreenshot interface, has a method
getScreenshotAs() to handle the screenshot functionality.

Usage
=====
TakeScreenshot takeScreen = (TakeScreenshot) driver;

Methods
=======
getScreenshotAs();

Example
=======
TakeScreenshot takeScreen = (TakeScreenshot) driver;
File src = takeScreen.getScreenshotAs(OutputType.FILE);
FileUtils.copy(src, new File("/image.png");
Files.copy(src, new File("/image.png");

driver.findElement(ByLocator).getScreenshotAs(OutputType.FILE);
FileUtils.copy(src, new File("/image.png");
Files.copy(src, new File("/image.png");

Note:
=====
Screenshot can be taken in 3 formats as below.
1. File
2. Byte
3. Base64

Screenshot can be taken for page level and element level.
=======================================================================
11. Print
=========
PrintOptions class, PDF class and PrintsPage Interface are used to print
the page.

Usage
=====
PrintOptions prints = new PrintOptions();

Methods
=======
print();
getContent();

Example
=======
PrintOptions prints = new PrintOptions();
PDF pdf = ((PrintsPage) driver).print(prints);
String content = pdf.getContent();
Files.write(OutputTypes.BYTES.convertFromBase64Png(content), new File("./print.pdf"));
=======================================================================
12. Page
========
RemoteWebDriver class implements WebDriver interface which is used to
handle the page related actions.

Usage
=====
driver.getTitle();
driver.getCurrentUrl();
driver.getPageSource();

Methods
=======
getTitle();
getCurrentUrl();
getPageSource();
=======================================================================

