=======================================================================
Selenium
=======================================================================
1. Alert
==========
Alert is an interface. It is used to handle the alert / popup.
3 types - Simple, Confirm, and Prompt.

Usage
=====
Alert alert = driver.switchTo().alert();

Methods
=======
alert.accept();
alert.dismiss();
alert.getText();
alert.sendKeys();
wait.until(ExpectedConditions.alertIsPresent()); - Wait and switch to Alert.

Exception
=========
1. NoAlertPresentException
2. UnhandledAlertException
=======================================================================
2. Dropdown
===========
Select Class which implements ISelect Interface and WrapElement Interface.
It is used to handle the dropdown.
2 types - Single, and Multiple.

Usage
=====
Select selectObj = new Select(WebElement);

Methods
=======
selectObject.selectByIndex();
selectObject.selectByValue();
selectObject.selectByVisibleText();
selectObject.deselectByIndex();
selectObject.deselectByValue();
selectObject.deselectByVisibleText();
selectObject.isMultiple();
selectObject.deselectAll(); - Works ONLY with MultiSelect Dropdown.
selectObject.getOptions();
selectObject.getAllSelectedOptions();
selectObject.getFirstSelectedOption();
selectObject.getOptions().get(index) - To get specific option text

Exception
=========
1. UnexpectedTagNameException

NOTES:
1. deselectBy* Methods works ONLY with MultiSelect Dropdown.
2. Single Dropdown doesn't support deselectBy* methods.
3. selectByIndex() - Index may start from 0 or 1 based on implementation.
=======================================================================
3. Frame
========
RemoteWebDriver.RemoteTargetLocator class which implements WebDriver.TargetLocator Interface.
It has methods to handle the Frame.

Usage
=====
driver.switchTo().frame();

Methods
=======
driver.switchTo().frame(Index);
driver.switchTo().frame(IdOrName);
driver.switchTo().frame(WebElement);
driver.switchTo().ParentFrame(); - To switch from Child Frame to Parent Frame.
driver.switchTo().defaultContent(); - To switch From Frame to Normal Window.
wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(ByLocator)); - Wait and switch to Frame.

Exception
=========
1. NoSuchFrameException

NOTES:
1. Frame index starts with 0.
=======================================================================
4. Navigation
=============
RemoteWebDriver.RemoteNavigation class which implements WebDriver.Navigation Interface.
It is used to handle the navigation related actions.

Usage
=====
driver.navigate()

Methods
=======
to()
back()
forward()
refresh()
=======================================================================
5. Window
=========
RemoteWebDriver.RemoteTargetLocator class which implements WebDriver.TargetLocator Interface.
It has methods to handle the Window.

Usage
=====
driver.switchTo().window();
driver.switchTo().newWindow();

Methods
=======
window(handle);
newWindow(WindowType.WINDOW/TAB);

RemoteWindow class which implements WebDriver.Window Interface.
It is used to handle the Window view and size related operations.

Usage
=====
driver.manage().window()

methods
=======
maximize()
minimize()
fullscreen()
setPosition(Point(X Axis, Y Axis))
getPosition()
setSize(Dimension(Width, Height))
getSize()

Related Information
===================
Point and Dimension are classes, which is used to handle the window
position and window size.

Usage
=====
driver.manage().window().setPosition(Point)
driver.manage().window().setSize(Dimension)

Methods
=======
getX() => getPosition().getX();
getY() => getPosition().getY();
getWidth() => getSize().getWidth();
getHeight() => getSize().getHeight();

Exception
=========
1. NoSuchWindowException
=======================================================================
6. Cookies
==========
A cookie is a small piece of information that will be stored on the Client machine.
It contains data such as session data, user preferences and tracking information.

RemoteWebDriverOptions class implements WebDriver.Options interface and which
has methods to handle the cookie and its related operations.

Cookie is a class which the attribute details to create the cookie.

Usage
=====
driver.manage().addCookie(CookieObject);
Cookie cookie = new Cookie(Name, Value);

Methods
=======
addCookie(cookieObject);
getCookieNamed(cookieName);
getCookies();
deleteCookieNamed(cookieName);
deleteCookie(cookieObject);
deleteAllCookies();

Exception
=========
1. InvalidCookieDomainException
2. NoSuchCookieException
3. UnableToSetCookieException
=======================================================================